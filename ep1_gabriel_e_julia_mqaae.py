# -*- coding: utf-8 -*-
"""ep1_gabriel_e_julia_mqaae.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-mycHBc-FyqhAb-m1DqYpn1w9d1GAKk8
"""

import pandas as pd #biblioteca para ciência de dados
import numpy as np #biblioteca para matrizes e operações matemáticas
from numpy import linalg as LA
import seaborn as sns #biblioteca para vizulização dos dados
import matplotlib.pyplot as plt #biblioteca para vizulização dos dados
from sklearn.decomposition import PCA #biblioteca para ciência de dados de onde importamos PCA
from sklearn.preprocessing import MinMaxScaler

sheets_url = 'https://raw.githubusercontent.com/gabrielMessias/MQAAE/master/Autismo.txt?token=AKS3G7RFCBEUSI5XVZNTI2K5O2JCK'
#o dataset está nesse link, é o dataset sobre o Autismo que estava no tidia
df = pd.read_csv(sheets_url)
#utiliza o metodo read_csv do pandas, analisando os dados de sheets_url

df
#exibe os dados do dataset

df.isnull().sum()
#verifica se há algum dado nulo, pois se houver, teríamos que tratá-los
#Após a verificação, vimos que no nosso dataset não há dado nulo

df.replace('NO', 0, inplace = True)
df.replace('YES', 1, inplace = True)
#O método PCA da biblioteca sklearn aceita apenas dados numéricos, então
#transformamos esses dados em números inteiros, em que 0 significa
#"não possui autismo" e 1 significa "possui autismo"

pca_1 = PCA(n_components = 2)
pca_2 = PCA(n_components = 1)

#pca_3 = PCA(n_components = 3)
#pca_4 = PCA(0.90)#0 - 1(variancia que voce quer explicar)
df_numerics = df[['A1_Score', 'A2_Score', 'A3_Score',	'A4_Score',	'A5_Score',	'A6_Score',	'A7_Score',	'A8_Score',	'A9_Score', 'A10_Score']].copy()

numerics_transformed_1 = pca_1.fit_transform(df_numerics)
numerics_transformed_2 = pca_2.fit_transform(df_numerics)
#numerics_transformed_3 = pca_3.fit_transform(df_numerics)
#numerics_transformed_4 = pca_4.fit_transform(df_numerics)

"""Na célula acima, criamos 2 variáveis para a realização do teste de PCA:
pca_1 fará a redução para 2 componentes e pca_2 para 1 componente.

A variável df_numerics é o novo dataframe, apenas com os teste de autismo (as principais features para designar se a pessoa está dentro do espectro do autismo -ASD)

numerics_transformed_1 é o novo dataframe com a aplicação do PCA, a partir do método fit_transform do objeto pca_1, o mesmo para numerics_transformed_2 e pca_2.
"""

numerics_transformed_1
#exibição do novo dataframe, agora com o teste de PCA realizado

Xax=numerics_transformed_1[:,0]
Yax=numerics_transformed_1[:,1]

labels=df.ClassASD

cdict={0:'red',1:'green'}
labl={0:'Nao possui autismo', 1: 'Possui autismo'}
marker={0:'*',1:'o'}
alpha={0:.3, 1:.5}

fig,ax=plt.subplots(figsize=(7,5))
fig.patch.set_facecolor('white')
for l in np.unique(labels):
  ix=np.where(labels==l)
  ax.scatter(Xax[ix],Yax[ix],c=cdict[l],s=40, label=labl[l],marker=marker[l],alpha=alpha[l])
plt.xlabel("First Principal Component",fontsize=14)
plt.ylabel("Second Principal Component",fontsize=14)
plt.legend()
plt.show()

#o codigo acima plota o grafico 2D

"""O código da célula acima tem o objetivo de plotar o nosso dataframe numerics_transformed_1, em que os eixos X e Y correspondem aos dois componentes do nosso dataframme.

O label é o componente ClassASD (0 para não possuir autismo e 1 para possuir autismo) do dataframe df.
"""

test = pd.DataFrame(numerics_transformed_2, df.ClassASD).reset_index()
test.columns= ['Autism', 'Principal Component']

sns.catplot(x="Autism", y='Principal Component', data=test);